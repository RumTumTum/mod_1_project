{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import clean_data as imd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "%matplotlib inline\n",
    "sns.set()\n",
    "\n",
    "combined = imd.movies_combined()\n",
    "\n",
    "# add global profit\n",
    "combined['profit'] = combined.worldwide_gross - combined.production_budget\n",
    "# add the genre_count variable to combined\n",
    "combined['genre_count'] = combined.genres.map(lambda x: int(len(x)))\n",
    "#create list of genres\n",
    "genre_list = list(combined.loc[:,'action':'musical'].keys())\n",
    "#create dict of genres with value = 0\n",
    "genre_dict = {}\n",
    "\n",
    "# aggregate various revenue and profitability metrics by genre\n",
    "for genre in genre_list:\n",
    "    genre_dict[genre] = []\n",
    "    # Total number of movies by genre\n",
    "    genre_dict[genre].append (int(combined[genre].sum()))\n",
    "    # Total domestic gross of movies by genre\n",
    "    genre_dict[genre].append (combined[combined[genre]==1]['domestic_gross'].sum())\n",
    "    # Total weighted domestic gross in cases of multi-genre movies by genre\n",
    "    genre_dict[genre].append ((combined[combined[genre]==1]['domestic_gross'] \n",
    "                               / combined[combined[genre]==1]['genre_count']).sum())\n",
    "    genre_dict[genre].append (combined[combined[genre]==1]['worldwide_gross'].sum())\n",
    "    genre_dict[genre].append (combined[combined[genre]==1]['production_budget'].sum())\n",
    "    genre_dict[genre].append (combined[combined[genre]==1]['profit'].sum())\n",
    "    genre_dict[genre].append (combined[combined[genre]==1]['profit'].median())\n",
    "\n",
    "\n",
    "# convert to df\n",
    "genre_df = pd.DataFrame.from_dict(genre_dict, orient='index', \n",
    "                                  columns=['count_movies', 'domestic_gross', 'domestic_gross_dltd',\n",
    "                                             'worldwide_gross','production_budget','profit',\n",
    "                                             'median_profit_per_movie'])\n",
    "genre_df.reset_index(inplace=True)\n",
    "genre_df.rename(columns={'index': 'genre'},inplace=True)\n",
    "\n",
    "# calculate various other metrics\n",
    "genre_df['ROI'] = genre_df.profit / genre_df.production_budget\n",
    "genre_df['mean_profit_per_movie'] = genre_df.profit / genre_df.count_movies\n",
    "\n",
    "# capitalize genre for charting\n",
    "genre_df['genre_capitalized'] = genre_df.genre.map(lambda x: str(x).title())\n",
    "# genre_df\n",
    "\n",
    "# combined['start_year']\n",
    "\n",
    "# create list of relevant years\n",
    "year_list = list(range(2010,2020))\n",
    "# create dict of genres with value = 0\n",
    "year_dict = {}\n",
    "\n",
    "for year in year_list:\n",
    "    year_dict[year] = []\n",
    "    year_dict[year].append ((combined[combined['start_year'] == year ]['domestic_gross']).sum())\n",
    "    year_dict[year].append ((combined[combined['start_year'] == year ]['worldwide_gross']).sum())\n",
    "    \n",
    "# convert to df\n",
    "year_df = pd.DataFrame.from_dict(year_dict, orient='index', columns=['domestic_gross', 'worldwide_gross'])\n",
    "year_df.reset_index(inplace=True)\n",
    "year_df.rename(columns={'index': 'year'},inplace=True)\n",
    "year_df['foreign_gross'] = year_df['worldwide_gross'] - year_df['domestic_gross']\n",
    "\n",
    "# year_df\n",
    "\n",
    "# Set up the matplotlib figure\n",
    "h = 7\n",
    "l = 15\n",
    "text_height = 0.92\n",
    "f, ax1 = plt.subplots(1, 1, figsize=(l, h), sharex=True)\n",
    "# plot = sns.barplot(x = 'genre', y = 'domestic_gross_dltd', data = genre_df.sort_values(by='domestic_gross_dltd', ascending=False))\n",
    "\n",
    "# Add Data\n",
    "sns.barplot(x='genre_capitalized', y='domestic_gross_dltd', \n",
    "            data=genre_df[genre_df.domestic_gross_dltd > 0].sort_values(by='domestic_gross_dltd', ascending=False),\n",
    "            ax=ax1, palette=\"deep\")\n",
    "\n",
    "# Add Attributues\n",
    "ax1.axhline(0, color=\"k\", clip_on=False)\n",
    "ax1.set_ylabel(\"Revenue ($US B)\")\n",
    "ax1.set_xlabel(\"Genre\")\n",
    "ax1.set_title(\"US Revenue by Genre, 2010 to Present\", fontsize=25)\n",
    "\n",
    "\n",
    "# Add vertical lines and text\n",
    "ax1.axvline(x=(l/3-l*0.1+0.02), color='k', linestyle='--')\n",
    "ax1.axvline(x=(l/3*3-l*0.1), color='k', linestyle='--')\n",
    "ax1.text(0.1,text_height,'Tier 1',fontsize=20,horizontalalignment='center',\n",
    "         verticalalignment='center', transform=ax1.transAxes)\n",
    "ax1.text(0.45,text_height,'Tier 2',fontsize=20,horizontalalignment='center',\n",
    "         verticalalignment='center', transform=ax1.transAxes)\n",
    "ax1.text(0.85,text_height,'Tier 3',fontsize=20,horizontalalignment='center',\n",
    "         verticalalignment='center', transform=ax1.transAxes)\n",
    "\n",
    "sns.despine(bottom=True)\n",
    "# plt.setp(f.axes, yticks=[])  #adds / removes y-axis ticks\n",
    "plt.tight_layout(h_pad=2)\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "# ylabels = ['{:,.2f}'.format(y) + 'K' for y in ax1.get_xticks()/1000000]\n",
    "ax1.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{:,}\".format(int(x)/10**9)))\n",
    "\n",
    "#make font larger\n",
    "sns.set(font_scale=1.5)\n",
    "\n",
    "#show plot\n",
    "# plt.savefig('charts/revenue_by_genre.png')\n",
    "# plt.show()\n",
    "\n",
    "# Set up the matplotlib figure\n",
    "h = 7\n",
    "l = 15\n",
    "text_height = 0.92\n",
    "f, ax1 = plt.subplots(1, 1, figsize=(l, h), sharex=True)\n",
    "# plot = sns.barplot(x = 'genre', y = 'domestic_gross_dltd', \n",
    "# data = genre_df.sort_values(by='domestic_gross_dltd', ascending=False))\n",
    "\n",
    "#Add Data\n",
    "sns.barplot(x='genre_capitalized', y='ROI', data=genre_df[genre_df.domestic_gross_dltd > 0].sort_values(by='domestic_gross_dltd', ascending=False),\n",
    "            ax=ax1, palette=\"deep\")\n",
    "\n",
    "#Add Attributues\n",
    "ax1.axhline(0, color=\"k\", clip_on=False)\n",
    "ax1.set_ylabel(\"Return on Investment (ROI)\")\n",
    "ax1.set_xlabel(\"Genre\")\n",
    "ax1.set_title(\"Weighted Average ROI by Genre, 2010 to Present\", fontsize = 25)\n",
    "\n",
    "#Add vertical lines and text\n",
    "ax1.axvline(x=(l/3-l*0.1+0.02), color='k', linestyle='--')\n",
    "ax1.axvline(x=(l/3*3-l*0.1), color='k', linestyle='--')\n",
    "ax1.text(0.1,text_height,'Tier 1',fontsize=20,horizontalalignment='center',verticalalignment='center', \n",
    "         transform=ax1.transAxes)\n",
    "ax1.text(0.45,text_height,'Tier 2',fontsize=20,horizontalalignment='center',verticalalignment='center',\n",
    "         transform=ax1.transAxes)\n",
    "ax1.text(0.85,text_height,'Tier 3',fontsize=20,horizontalalignment='center',verticalalignment='center',\n",
    "         transform=ax1.transAxes)\n",
    "\n",
    "sns.despine(bottom=True)\n",
    "# plt.setp(f.axes, yticks=[])  #adds / removes y-axis ticks\n",
    "plt.tight_layout(h_pad=2)\n",
    "plt.yticks(np.arange(5))\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "# ylabels = ['{:,.2f}'.format(y) + 'K' for y in ax1.get_xticks()/1000000]\n",
    "ax1.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \n",
    "                                                      \"{number:.{round}%}\".format(number=int(x),round=0)))\n",
    "\n",
    "#make font larger\n",
    "sns.set(font_scale=1.5)\n",
    "\n",
    "#show plot\n",
    "# plt.savefig('charts/ROI_by_genre.png')\n",
    "# plt.show()\n",
    "\n",
    "# Set up the matplotlib figure\n",
    "h = 7\n",
    "l = 15\n",
    "text_height = 0.92\n",
    "f, ax1 = plt.subplots(1, 1, figsize=(l, h), sharex=True)\n",
    "# plot = sns.barplot(x = 'genre', y = 'domestic_gross_dltd', data = genre_df.sort_values(by='domestic_gross_dltd', \n",
    "# ascending=False))\n",
    "\n",
    "# Add Data\n",
    "sns.barplot(x='genre_capitalized', y='mean_profit_per_movie', \n",
    "            data=genre_df[genre_df.domestic_gross_dltd > 0].sort_values(by='domestic_gross_dltd', ascending=False), \n",
    "            ax=ax1, palette=\"deep\")\n",
    "\n",
    "# Add Attributues\n",
    "ax1.axhline(0, color=\"k\", clip_on=False)\n",
    "ax1.set_ylabel(\"Mean Profit per Movie\")\n",
    "ax1.set_xlabel(\"Genre\")\n",
    "ax1.set_title(\"Mean Profit per Movie by Genre, 2010 to Present\", fontsize = 25)\n",
    "\n",
    "# Add vertical lines and text\n",
    "ax1.axvline(x=(l/3-l*0.1+0.02), color='k', linestyle='--')\n",
    "ax1.axvline(x=(l/3*3-l*0.1), color='k', linestyle='--')\n",
    "ax1.text(0.1,text_height,'Tier 1',fontsize=20,horizontalalignment='center',verticalalignment='center', transform=ax1.transAxes)\n",
    "ax1.text(0.45,text_height,'Tier 2',fontsize=20,horizontalalignment='center',verticalalignment='center', transform=ax1.transAxes)\n",
    "ax1.text(0.85,text_height,'Tier 3',fontsize=20,horizontalalignment='center',verticalalignment='center', transform=ax1.transAxes)\n",
    "\n",
    "sns.despine(bottom=True)\n",
    "# plt.setp(f.axes, yticks=[])  #adds / removes y-axis ticks\n",
    "plt.tight_layout(h_pad=2)\n",
    "# plt.yticks(np.arange(5))\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "# ylabels = ['{:,.2f}'.format(y) + 'K' for y in ax1.get_xticks()/1000000]\n",
    "ax1.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{number:,}\".format(number=int(x)/10**6)))\n",
    "\n",
    "#make font larger\n",
    "sns.set(font_scale=1.5)\n",
    "\n",
    "#show plot\n",
    "# plt.savefig('charts/mean_profit_per_movie_by_genre.png')\n",
    "# plt.show()\n",
    "\n",
    "# Set up the matplotlib figure\n",
    "h = 7\n",
    "l = 15\n",
    "text_height = 0.92\n",
    "f, ax1 = plt.subplots(1, 1, figsize=(l, h), sharex=True)\n",
    "# plot = sns.barplot(x = 'genre', y = 'domestic_gross_dltd', data = genre_df.sort_values(by='domestic_gross_dltd', \n",
    "# ascending=False))\n",
    "\n",
    "# Add Data\n",
    "sns.barplot(x = 'genre_capitalized', y = 'median_profit_per_movie', \n",
    "            data=genre_df[genre_df.domestic_gross_dltd > 0].sort_values(by='domestic_gross_dltd', ascending=False), \n",
    "            ax=ax1, palette=\"deep\")\n",
    "\n",
    "# Add Attributues\n",
    "ax1.axhline(0, color=\"k\", clip_on=False)\n",
    "ax1.set_ylabel(\"Median Profit per Movie ($US M)\")\n",
    "ax1.set_xlabel(\"Genre\")\n",
    "ax1.set_title(\"Median Profit per Movie by Genre, 2010 to Present\", fontsize=25)\n",
    "\n",
    "#Add vertical lines and text\n",
    "ax1.axvline(x=(l/3-l*0.1+0.02), color='k', linestyle='--')\n",
    "ax1.axvline(x=(l/3*3-l*0.1), color='k', linestyle='--')\n",
    "ax1.text(0.1,text_height,'Tier 1',fontsize=20,horizontalalignment='center',verticalalignment='center', \n",
    "         transform=ax1.transAxes)\n",
    "ax1.text(0.45,text_height,'Tier 2',fontsize=20,horizontalalignment='center',verticalalignment='center', \n",
    "         transform=ax1.transAxes)\n",
    "ax1.text(0.85,text_height,'Tier 3',fontsize=20,horizontalalignment='center',verticalalignment='center', \n",
    "         transform=ax1.transAxes)\n",
    "\n",
    "sns.despine(bottom=True)\n",
    "# plt.setp(f.axes, yticks=[])  #adds / removes y-axis ticks\n",
    "plt.tight_layout(h_pad=2)\n",
    "# plt.yticks(np.arange(5))\n",
    "plt.xticks(rotation=45)\n",
    "\n",
    "# ylabels = ['{:,.2f}'.format(y) + 'K' for y in ax1.get_xticks()/1000000]\n",
    "ax1.get_yaxis().set_major_formatter(plt.FuncFormatter(lambda x, loc: \"{number:,}\".format(number=int(x)/10**6)))\n",
    "\n",
    "# make font larger\n",
    "sns.set(font_scale=1.5)\n",
    "\n",
    "# show plot\n",
    "plt.savefig('charts/median_profit_per_movie_by_genre.png')\n",
    "plt.show()\n",
    "\n",
    "# Set general plot properties\n",
    "f, ax1 = plt.subplots(1, 1, figsize=(15, 5), sharex=True)\n",
    "\n",
    "#Plot 1 - background - \"total\" (top) series\n",
    "# sns.barplot(x = stacked_bar_data.Group, y = stacked_bar_data.total, , color = \"red\")\n",
    "sns.barplot(x='year', y='worldwide_gross', data = year_df[year_df['year'] < 2019], ax=ax1, color='#0000A3')\n",
    "\n",
    "#Plot 2 - overlay - \"bottom\" series\n",
    "bottom_plot = sns.barplot(x='year', y='domestic_gross', data=year_df[year_df['year'] < 2019], ax=ax1, color=\"green\")\n",
    "# bottom_plot = sns.barplot(x = stacked_bar_data.Group, y = stacked_bar_data.Series1, color = \"#0000A3\")\n",
    "\n",
    "topbar = plt.Rectangle((0,0),1,1,fc=\"green\", edgecolor='none')\n",
    "bottombar = plt.Rectangle((0,0),1,1,fc='#0000A3', edgecolor='none')\n",
    "l = plt.legend([bottombar, topbar], ['Foreign Revenue', 'US Revenue'], loc=1, ncol = 2, prop={'size':16})\n",
    "l.draw_frame(False)\n",
    "\n",
    "#Optional code - Make plot look nicer\n",
    "# sns.despine(left=True)\n",
    "# bottom_plot.set_ylabel(\"Y-axis label\")\n",
    "# bottom_plot.set_xlabel(\"X-axis label\")\n",
    "\n",
    "#Set fonts to consistent 16pt size\n",
    "# for item in ([bottom_plot.xaxis.label, bottom_plot.yaxis.label] +\n",
    "#              bottom_plot.get_xticklabels() + bottom_plot.get_yticklabels()):\n",
    "#     item.set_fontsize(16)\n",
    "# plt.savefig('charts/revenue_over_time.png')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
